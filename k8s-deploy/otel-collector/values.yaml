# values.yaml para OpenTelemetry Collector via Helm
# Inclui a configuração customizada baseada no otel-collector.yaml


# Customiza o nome dos pods e recursos gerados pelo Helm
nameOverride: otel-collector

# Recurso recomendado para evitar warnings do Helm
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

image:
  repository: otel/opentelemetry-collector-contrib
  tag: ""

mode: daemonset
# Monta /var/log do host para o container, igual ao Fluent Bit
extraVolumeMounts:
  - name: varlog
    mountPath: /var/log
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers

extraVolumes:
  - name: varlog
    hostPath:
      path: /var/log
      type: ""
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
      type: ""

config:
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    filelog:
      include_file_path: true
      include: 
        - /var/log/containers/*.log
        - /var/log/pods/**/*.log
        - /var/lib/docker/containers/*.log
      start_at: end
      operators:
        - type: router
          routes:
            - expr: 'body matches "^\\s*\\{"'  # JSON
              output: json
            - expr: 'body matches "^[a-zA-Z0-9_.\\-]+=.*"'  # logfmt simples
              output: logfmt_regex
            - expr: 'true'  # fallback: tudo que não for JSON nem logfmt
              output: raw
        - type: json_parser
          id: json
          parse_from: body
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%fZ'
          severity:
            parse_from: attributes.level
          agent:
            parse_from: attributes.agent
        - type: regex_parser
          id: logfmt_regex
          parse_from: body
          regex: 'level="(?P<level>[^\"]+)" time="(?P<time>[^\"]+)" caller="(?P<caller>[^\"]+)" msg="(?P<msg>[^\"]+)" traceId="(?P<traceId>[^\"]+)" spanId="(?P<spanId>[^\"]+)" service_name="(?P<service_name>[^\"]+)"'
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%fZ'
          severity:
            parse_from: attributes.level
          agent:
            parse_from: attributes.agent
        - type: move
          id: raw
          from: body
          to: body  # apenas encaminha o log bruto
  extensions:
    health_check: {}
    pprof:
      endpoint: :1888
    zpages:
      endpoint: :55679      
  exporters:
    otlp/jaeger:
      endpoint: "http://jaeger-collector.monitoring.svc.cluster.local:4317"
      tls:
        insecure: true
    prometheus:
      endpoint: "0.0.0.0:8889"
    otlphttp/logs:
      endpoint: "http://loki-write.monitoring.svc.cluster.local:3100/otlp"
      tls:
        insecure: true
  processors:
    batch: {}
    resource:
      attributes:
        - action: insert
          key: agent
          value: otel-collector
        - action: insert
          key: loki.attribute.labels
          value: service_name
    transform:
      log_statements:
        - context: log
          statements:
            - set(resource.attributes["service.name"], attributes["service_name"])
  service:
    extensions: [pprof, zpages, health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [batch]
        exporters: [otlp/jaeger]
      metrics:
        receivers: [otlp]
        processors: [batch]
        exporters: [prometheus]
      logs:
        receivers: [filelog]
        exporters: [otlphttp/logs]
        processors: [transform, batch, resource]
